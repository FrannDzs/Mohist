--- a/net/minecraft/commands/Commands.java
+++ b/net/minecraft/commands/Commands.java
@@ -1,5 +_,6 @@
 package net.minecraft.commands;
 
+import com.google.common.base.Joiner;
 import com.google.common.collect.Maps;
 import com.mojang.brigadier.CommandDispatcher;
 import com.mojang.brigadier.ParseResults;
@@ -11,6 +_,10 @@
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.brigadier.tree.CommandNode;
 import com.mojang.brigadier.tree.RootCommandNode;
+
+import java.lang.reflect.Field;
+import java.util.Collection;
+import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Set;
 import java.util.function.Predicate;
@@ -103,6 +_,8 @@
 import net.minecraft.server.level.ServerPlayer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.event.player.PlayerCommandSendEvent;
+import org.bukkit.event.server.ServerCommandEvent;
 
 public class Commands {
    private static final Logger f_82089_ = LogManager.getLogger();
@@ -114,6 +_,7 @@
    private final CommandDispatcher<CommandSourceStack> f_82090_ = new CommandDispatcher<>();
 
    public Commands(Commands.CommandSelection p_82093_) {
+      this(); // CraftBukkit
       AdvancementCommands.m_136310_(this.f_82090_);
       AttributeCommand.m_136444_(this.f_82090_);
       ExecuteCommand.m_137042_(this.f_82090_);
@@ -193,6 +_,7 @@
       if (p_82093_.f_82144_) {
          PublishCommand.m_138184_(this.f_82090_);
       }
+      net.minecraftforge.event.ForgeEventFactory.onCommandRegister(this.f_82090_, p_82093_);
 
       this.f_82090_.findAmbiguities((p_82108_, p_82109_, p_82110_, p_82111_) -> {
          f_82089_.warn("Ambiguity between arguments {} and {} with inputs: {}", this.f_82090_.getPath(p_82109_), this.f_82090_.getPath(p_82110_), p_82111_);
@@ -202,9 +_,55 @@
       });
    }
 
-   public int m_82117_(CommandSourceStack p_82118_, String p_82119_) {
+    public Commands() {
+       this.f_82090_.setConsumer((commandcontext, flag1, i) -> {
+          ((CommandSourceStack) commandcontext.getSource()).m_81342_(commandcontext, flag1, i);
+       });
+    }
+
+    public int dispatchServerCommand(CommandSourceStack sender, String command) {
+       Joiner joiner = Joiner.on(" ");
+       if (command.startsWith("/")) {
+          command = command.substring(1);
+       }
+
+       ServerCommandEvent event = new ServerCommandEvent(sender.getBukkitSender(), command);
+       org.bukkit.Bukkit.getPluginManager().callEvent(event);
+       if (event.isCancelled()) {
+          return 0;
+       }
+       command = event.getCommand();
+
+       String[] args = command.split(" ");
+
+       String cmd = args[0];
+       if (cmd.startsWith("minecraft:")) cmd = cmd.substring("minecraft:".length());
+       if (cmd.startsWith("bukkit:")) cmd = cmd.substring("bukkit:".length());
+
+       // Block disallowed commands
+       if (cmd.equalsIgnoreCase("stop") || cmd.equalsIgnoreCase("kick") || cmd.equalsIgnoreCase("op")
+               || cmd.equalsIgnoreCase("deop") || cmd.equalsIgnoreCase("ban") || cmd.equalsIgnoreCase("ban-ip")
+               || cmd.equalsIgnoreCase("pardon") || cmd.equalsIgnoreCase("pardon-ip") || cmd.equalsIgnoreCase("reload")) {
+          return 0;
+       }
+
+       // Handle vanilla commands;
+       if (sender.m_81372_().getCraftServer().getCommandBlockOverride(args[0])) {
+          args[0] = "minecraft:" + args[0];
+       }
+
+       String newCommand = joiner.join(args);
+       return this.performCommand(sender, newCommand, newCommand, false);
+    }
+
+    public int m_82117_(CommandSourceStack p_82118_, String p_82119_) {
+       return this.performCommand(p_82118_, p_82119_, p_82119_, true);
+    }
+
+    public int performCommand(CommandSourceStack p_82118_, String p_82119_, String label, boolean stripSlash) {
       StringReader stringreader = new StringReader(p_82119_);
-      if (stringreader.canRead() && stringreader.peek() == '/') {
+       if (stripSlash && stringreader.canRead() && stringreader.peek() == '/') {
+          // CraftBukkit end
          stringreader.skip();
       }
 
@@ -212,7 +_,15 @@
 
       try {
          try {
-            return this.f_82090_.execute(stringreader, p_82118_);
+            ParseResults<CommandSourceStack> parse = this.f_82090_.parse(stringreader, p_82118_);
+            net.minecraftforge.event.CommandEvent event = new net.minecraftforge.event.CommandEvent(parse);
+            if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event)) {
+               if (event.getException() != null) {
+                  com.google.common.base.Throwables.throwIfUnchecked(event.getException());
+               }
+               return 1;
+            }
+            return this.f_82090_.execute(event.getParseResults());
          } catch (CommandRuntimeException commandruntimeexception) {
             p_82118_.m_81352_(commandruntimeexception.m_79226_());
             return 0;
@@ -221,7 +_,7 @@
             if (commandsyntaxexception.getInput() != null && commandsyntaxexception.getCursor() >= 0) {
                int j = Math.min(commandsyntaxexception.getInput().length(), commandsyntaxexception.getCursor());
                MutableComponent mutablecomponent1 = (new TextComponent("")).m_130940_(ChatFormatting.GRAY).m_130938_((p_82134_) -> {
-                  return p_82134_.m_131142_(new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, p_82119_));
+                  return p_82134_.m_131142_(new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, label)); // CraftBukkit
                });
                if (j > 10) {
                   mutablecomponent1.m_130946_("...");
@@ -265,10 +_,46 @@
    }
 
    public void m_82095_(ServerPlayer p_82096_) {
-      Map<CommandNode<CommandSourceStack>, CommandNode<SharedSuggestionProvider>> map = Maps.newHashMap();
+      // CraftBukkit start
+      // Register Vanilla commands into builtRoot as before
+      Map<CommandNode<CommandSourceStack>, CommandNode<SharedSuggestionProvider>> map = Maps.newIdentityHashMap(); // Use identity to prevent aliasing issues
+      RootCommandNode vanillaRoot = new RootCommandNode();
+
+      RootCommandNode<CommandSourceStack> vanilla = p_82096_.f_8924_.vanillaCommandDispatcher.m_82094_().getRoot();
+      map.put(vanilla, vanillaRoot);
+      this.m_82112_(vanilla, vanillaRoot, p_82096_.m_20203_(), (Map) map);
+
+      // Now build the global commands in a second pass
       RootCommandNode<SharedSuggestionProvider> rootcommandnode = new RootCommandNode<>();
       map.put(this.f_82090_.getRoot(), rootcommandnode);
       this.m_82112_(this.f_82090_.getRoot(), rootcommandnode, p_82096_.m_20203_(), map);
+
+      Collection<String> bukkit = new LinkedHashSet<>();
+      for (CommandNode node : rootcommandnode.getChildren()) {
+         bukkit.add(node.getName());
+      }
+
+      PlayerCommandSendEvent event = new PlayerCommandSendEvent(p_82096_.getBukkitEntity(), new LinkedHashSet<>(bukkit));
+      event.getPlayer().getServer().getPluginManager().callEvent(event);
+
+      // Remove labels that were removed during the event
+      // Remove labels that were removed during the event
+      for (String orig : bukkit) {
+         if (!event.getCommands().contains(orig)) {
+            // Mohist start
+            try {
+               ((Map<?, ?>) BRIGADIER_CHILDREN.get(rootcommandnode)).remove(orig);
+               ((Map<?, ?>) BRIGADIER_LITERALS.get(rootcommandnode)).remove(orig);
+               ((Map<?, ?>) BRIGADIER_ARGUMENTS.get(rootcommandnode)).remove(orig);
+            } catch (Exception ex) {
+               f_82089_.warn("Mohist wasn't able to remove command '" + orig + "' from Brigadier's CommandNode!");
+               ex.printStackTrace();
+               break;
+            }
+            // Mohist end
+         }
+      }
+      // CraftBukkit end
       p_82096_.f_8906_.m_141995_(new ClientboundCommandsPacket(rootcommandnode));
    }
 
@@ -373,4 +_,29 @@
    public interface ParseFunction {
       void m_82160_(StringReader p_82161_) throws CommandSyntaxException;
    }
+
+   // Mohist start
+   private static final Field BRIGADIER_CHILDREN;
+   private static final Field BRIGADIER_LITERALS;
+   private static final Field BRIGADIER_ARGUMENTS;
+   static {
+      Field children = null;
+      Field literals = null;
+      Field arguments = null;
+      try {
+         children = CommandNode.class.getDeclaredField("children");
+         literals = CommandNode.class.getDeclaredField("literals");
+         arguments = CommandNode.class.getDeclaredField("arguments");
+         children.setAccessible(true);
+         literals.setAccessible(true);
+         arguments.setAccessible(true);
+      } catch (Exception ex) {
+         f_82089_.error("Mohist wasn't able to prepare reflection for Brigadier's CommandNode!");
+         ex.printStackTrace();
+      }
+      BRIGADIER_CHILDREN = children;
+      BRIGADIER_LITERALS = literals;
+      BRIGADIER_ARGUMENTS = arguments;
+   }
+   // Mohist end
 }

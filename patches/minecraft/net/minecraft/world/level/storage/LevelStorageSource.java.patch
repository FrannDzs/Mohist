--- a/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -53,6 +_,7 @@
 import net.minecraft.world.level.LevelSettings;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.dimension.DimensionType;
+import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.levelgen.NoiseGeneratorSettings;
 import net.minecraft.world.level.levelgen.WorldGenSettings;
 import org.apache.logging.log4j.LogManager;
@@ -94,7 +_,7 @@
          }
       }
 
-      Dynamic<T> dynamic1 = p_78206_.update(References.f_16795_, dynamic, p_78207_, SharedConstants.m_136187_().getWorldVersion());
+      Dynamic<T> dynamic1 = net.minecraftforge.common.ForgeHooks.fixUpDimensionsData(p_78206_.update(References.f_16795_, dynamic, p_78207_, SharedConstants.m_136187_().getWorldVersion()));
       DataResult<WorldGenSettings> dataresult = WorldGenSettings.f_64600_.parse(dynamic1);
       return Pair.of(dataresult.resultOrPartial(Util.m_137489_("WorldGenSettings: ", f_78191_::error)).orElseGet(() -> {
          Registry<DimensionType> registry = RegistryLookupCodec.m_135622_(Registry.f_122818_).codec().parse(dynamic1).resultOrPartial(Util.m_137489_("Dimension type registry: ", f_78191_::error)).orElseThrow(() -> {
@@ -191,6 +_,10 @@
    }
 
    static BiFunction<File, DataFixer, PrimaryLevelData> m_78247_(DynamicOps<Tag> p_78248_, DataPackConfig p_78249_) {
+       return getReader(p_78248_, p_78249_, null);
+   }
+
+   private static BiFunction<File, DataFixer, PrimaryLevelData> getReader(DynamicOps<Tag> p_78248_, DataPackConfig p_78249_, @Nullable LevelStorageAccess levelSave) {
       return (p_78214_, p_78215_) -> {
          try {
             CompoundTag compoundtag = NbtIo.m_128937_(p_78214_);
@@ -202,7 +_,10 @@
             Pair<WorldGenSettings, Lifecycle> pair = m_78204_(dynamic, p_78215_, i);
             LevelVersion levelversion = LevelVersion.m_78390_(dynamic);
             LevelSettings levelsettings = LevelSettings.m_46924_(dynamic, p_78249_);
-            return PrimaryLevelData.m_78530_(dynamic, p_78215_, i, compoundtag2, levelsettings, levelversion, pair.getFirst(), pair.getSecond());
+            PrimaryLevelData info = PrimaryLevelData.m_78530_(dynamic, p_78215_, i, compoundtag2, levelsettings, levelversion, pair.getFirst(), pair.getSecond());
+            if (levelSave != null)
+                net.minecraftforge.fmllegacy.WorldPersistenceHooks.handleWorldDataLoad(levelSave, info, compoundtag);
+            return info;
          } catch (Exception exception) {
             f_78191_.error("Exception reading {}", p_78214_, exception);
             return null;
@@ -260,16 +_,38 @@
    }
 
    public LevelStorageSource.LevelStorageAccess m_78260_(String p_78261_) throws IOException {
-      return new LevelStorageSource.LevelStorageAccess(p_78261_);
-   }
+      return new LevelStorageSource.LevelStorageAccess(p_78261_, null); // Mohist TODO
+   }
+
+   // CraftBukkit start
+   public LevelStorageSource.LevelStorageAccess createAccess(String s, ResourceKey<LevelStem> dimensionType) throws IOException {
+      return new LevelStorageSource.LevelStorageAccess(s, dimensionType);
+   }
+
+   public static File getFolder(File file, ResourceKey<LevelStem> dimensionType) {
+      if (dimensionType == LevelStem.f_63971_) {
+         return file;
+      } else if (dimensionType == LevelStem.f_63972_) {
+         return new File(file, "DIM-1");
+      } else if (dimensionType == LevelStem.f_63973_) {
+         return new File(file, "DIM1");
+      } else {
+         return new File(file, "dimensions/" + dimensionType.m_135782_().m_135827_() + "/" + dimensionType.m_135782_().m_135815_());
+      }
+   }
+   // CraftBukkit end
 
    public class LevelStorageAccess implements AutoCloseable {
       final DirectoryLock f_78270_;
-      final Path f_78271_;
+      public final Path f_78271_;
       private final String f_78272_;
       private final Map<LevelResource, Path> f_78273_ = Maps.newHashMap();
+      // CraftBukkit start
+      private final ResourceKey<LevelStem> dimensionType;
 
-      public LevelStorageAccess(String p_78276_) throws IOException {
+      public LevelStorageAccess(String p_78276_, ResourceKey<LevelStem> dimensionType) throws IOException {
+         this.dimensionType = dimensionType;
+         // CraftBukkit end
          this.f_78272_ = p_78276_;
          this.f_78271_ = LevelStorageSource.this.f_78194_.resolve(p_78276_);
          this.f_78270_ = DirectoryLock.m_13640_(this.f_78271_);
@@ -319,7 +_,7 @@
       @Nullable
       public WorldData m_78280_(DynamicOps<Tag> p_78281_, DataPackConfig p_78282_) {
          this.m_78313_();
-         return LevelStorageSource.this.m_78229_(this.f_78271_.toFile(), LevelStorageSource.m_78247_(p_78281_, p_78282_));
+         return LevelStorageSource.this.m_78229_(this.f_78271_.toFile(), LevelStorageSource.getReader(p_78281_, p_78282_, this));
       }
 
       @Nullable
@@ -338,6 +_,8 @@
          CompoundTag compoundtag1 = new CompoundTag();
          compoundtag1.m_128365_("Data", compoundtag);
 
+         net.minecraftforge.fmllegacy.WorldPersistenceHooks.handleWorldDataSave(this, p_78292_, compoundtag1);
+
          try {
             File file2 = File.createTempFile("level", ".dat", file1);
             NbtIo.m_128944_(compoundtag1, file2);
@@ -352,6 +_,10 @@
 
       public Optional<Path> m_182514_() {
          return !this.f_78270_.m_13639_() ? Optional.empty() : Optional.of(this.f_78271_.resolve("icon.png"));
+      }
+
+      public Path getWorldDir() {
+         return f_78271_;
       }
 
       public void m_78311_() throws IOException {

--- a/net/minecraft/server/level/DistanceManager.java
+++ b/net/minecraft/server/level/DistanceManager.java
@@ -33,6 +_,7 @@
 import net.minecraft.world.level.chunk.LevelChunk;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.plugin.Plugin;
 
 public abstract class DistanceManager {
    static final Logger f_140758_ = LogManager.getLogger();
@@ -52,6 +_,8 @@
    final Executor f_140770_;
    private long f_140771_;
 
+   private final Long2ObjectOpenHashMap<SortedArraySet<Ticket<?>>> forcedTickets = new Long2ObjectOpenHashMap<>();
+
    protected DistanceManager(Executor p_140774_, Executor p_140775_) {
       ProcessorHandle<Runnable> processorhandle = ProcessorHandle.m_18714_("player ticket throttler", p_140775_::execute);
       ChunkTaskPriorityQueueSorter chunktaskpriorityqueuesorter = new ChunkTaskPriorityQueueSorter(ImmutableList.of(processorhandle), p_140774_, 4);
@@ -146,6 +_,10 @@
          this.f_140762_.m_140715_(p_140785_, p_140786_.m_9433_(), true);
       }
 
+      if (p_140786_.isForceTicks()) {
+          SortedArraySet<Ticket<?>> tickets = forcedTickets.computeIfAbsent(p_140785_, e -> SortedArraySet.m_14246_(4));
+          tickets.m_14253_(ticket);
+      }
    }
 
    void m_140818_(long p_140819_, Ticket<?> p_140820_) {
@@ -158,7 +_,20 @@
       }
 
       this.f_140762_.m_140715_(p_140819_, m_140797_(sortedarrayset), false);
-   }
+
+      if (p_140820_.isForceTicks()) {
+          SortedArraySet<Ticket<?>> tickets = forcedTickets.get(p_140819_);
+          if (tickets != null) {
+              tickets.remove(p_140820_);
+          }
+      }
+   }
+
+   // CraftBukkit - start
+   public <T> boolean addTicketAtLevel(TicketType<T> ticketType, ChunkPos chunkcoordintpair, int level, T identifier) {
+      return false;
+   }
+   // CraftBukkit - end
 
    public <T> void m_140792_(TicketType<T> p_140793_, ChunkPos p_140794_, int p_140795_, T p_140796_) {
       this.m_140784_(p_140794_.m_45588_(), new Ticket<>(p_140793_, p_140795_, p_140796_));
@@ -178,6 +_,14 @@
       this.m_140818_(p_140851_.m_45588_(), ticket);
    }
 
+   public <T> void registerTicking(TicketType<T> type, ChunkPos pos, int distance, T value) {
+      this.m_140784_(pos.m_45588_(), new Ticket<>(type, 33 - distance, value, true));
+   }
+
+   public <T> void releaseTicking(TicketType<T> type, ChunkPos pos, int distance, T value) {
+      this.m_140818_(pos.m_45588_(), new Ticket<>(type, 33 - distance, value, true));
+   }
+
    private SortedArraySet<Ticket<?>> m_140857_(long p_140858_) {
       return this.f_140761_.computeIfAbsent(p_140858_, (p_140867_) -> {
          return SortedArraySet.m_14246_(4);
@@ -245,6 +_,11 @@
       return this.f_140766_.m_140558_();
    }
 
+   public boolean shouldForceTicks(long chunkPos) {
+       SortedArraySet<Ticket<?>> tickets = forcedTickets.get(chunkPos);
+       return tickets != null && !tickets.isEmpty();
+   }
+
    private void m_143207_(String p_143208_) {
       try {
          FileOutputStream fileoutputstream = new FileOutputStream(new File(p_143208_));
@@ -272,6 +_,13 @@
          f_140758_.error(ioexception);
       }
 
+   }
+
+   public boolean removeTicketAtLevel(TicketType<Plugin> pluginTicket, ChunkPos chunkPos, int i, Plugin plugin) {
+      return false;
+   }
+
+   public void removeAllTicketsFor(TicketType<Plugin> pluginTicket, int i, Plugin plugin) {
    }
 
    class ChunkTicketTracker extends ChunkTracker {

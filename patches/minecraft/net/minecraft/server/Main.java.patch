--- a/net/minecraft/server/Main.java
+++ b/net/minecraft/server/Main.java
@@ -11,6 +_,7 @@
 import java.net.Proxy;
 import java.nio.file.Path;
 import java.nio.file.Paths;
+import java.util.Arrays;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 import java.util.function.BooleanSupplier;
@@ -76,6 +_,20 @@
       OptionSpec<Integer> optionspec11 = optionparser.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(-1);
       OptionSpec<String> optionspec12 = optionparser.accepts("serverId").withRequiredArg();
       OptionSpec<String> optionspec13 = optionparser.nonOptions();
+      optionparser.accepts("allowUpdates").withRequiredArg().ofType(Boolean.class).defaultsTo(Boolean.TRUE); // Forge: allow mod updates to proceed
+      optionparser.accepts("gameDir").withRequiredArg().ofType(File.class).defaultsTo(new File(".")); //Forge: Consume this argument, we use it in the launcher, and the client side.
+
+      optionparser.acceptsAll(Arrays.asList("b", "bukkit-settings"), "File for bukkit settings")
+              .withRequiredArg()
+              .ofType(File.class)
+              .defaultsTo(new File("bukkit.yml"))
+              .describedAs("Yml file");
+
+      optionparser.acceptsAll(Arrays.asList("C", "commands-settings"), "File for command settings")
+              .withRequiredArg()
+              .ofType(File.class)
+              .defaultsTo(new File("commands.yml"))
+              .describedAs("Yml file");
 
       try {
          OptionSet optionset = optionparser.parse(p_129699_);
@@ -83,33 +_,38 @@
             optionparser.printHelpOn(System.err);
             return;
          }
+         Path path1 = Paths.get("eula.txt");
+         Eula eula = new Eula(path1);
+
+         if (!eula.m_135944_()) {
+            f_129670_.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
+            return;
+         }
 
          CrashReport.m_127529_();
          Bootstrap.m_135870_();
          Bootstrap.m_135889_();
          Util.m_137584_();
+         if (!optionset.has(optionspec1)) net.minecraftforge.fmllegacy.server.ServerModLoader.load(); // Load mods before we load almost anything else anymore. Single spot now. Only loads if they haven't passed the initserver param
          RegistryAccess.RegistryHolder registryaccess$registryholder = RegistryAccess.m_123086_();
          Path path = Paths.get("server.properties");
          DedicatedServerSettings dedicatedserversettings = new DedicatedServerSettings(path);
          dedicatedserversettings.m_139780_();
-         Path path1 = Paths.get("eula.txt");
-         Eula eula = new Eula(path1);
          if (optionset.has(optionspec1)) {
             f_129670_.info("Initialized '{}' and '{}'", path.toAbsolutePath(), path1.toAbsolutePath());
             return;
          }
 
-         if (!eula.m_135944_()) {
-            f_129670_.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
-            return;
-         }
-
          File file1 = new File(optionset.valueOf(optionspec9));
          YggdrasilAuthenticationService yggdrasilauthenticationservice = new YggdrasilAuthenticationService(Proxy.NO_PROXY);
          MinecraftSessionService minecraftsessionservice = yggdrasilauthenticationservice.createMinecraftSessionService();
          GameProfileRepository gameprofilerepository = yggdrasilauthenticationservice.createProfileRepository();
          GameProfileCache gameprofilecache = new GameProfileCache(gameprofilerepository, new File(file1, MinecraftServer.f_129742_.getName()));
          String s = Optional.ofNullable(optionset.valueOf(optionspec10)).orElse(dedicatedserversettings.m_139777_().f_139741_);
+         if (s == null || s.isEmpty() || new File(file1, s).getAbsolutePath().equals(new File(s).getAbsolutePath())) {
+            f_129670_.error("Invalid world directory specified, must not be null, empty or the same directory as your universe! " + s);
+            return;
+         }
          LevelStorageSource levelstoragesource = LevelStorageSource.m_78242_(file1.toPath());
          LevelStorageSource.LevelStorageAccess levelstoragesource$levelstorageaccess = levelstoragesource.m_78260_(s);
          MinecraftServer.m_129845_(levelstoragesource$levelstorageaccess);
@@ -154,6 +_,8 @@
                worldgensettings = optionset.has(optionspec3) ? dedicatedserverproperties.m_180927_(registryaccess$registryholder).m_64671_() : dedicatedserverproperties.m_180927_(registryaccess$registryholder);
             }
 
+            // Forge: Deserialize the DimensionGeneratorSettings to ensure modded dims are loaded on first server load (see SimpleRegistryCodec#decode). Vanilla behaviour only loads from the server.properties and deserializes only after the 2nd server load.
+            worldgensettings = WorldGenSettings.f_64600_.encodeStart(net.minecraft.resources.RegistryWriteOps.m_135767_(NbtOps.f_128958_, registryaccess$registryholder), worldgensettings).flatMap(nbt -> WorldGenSettings.f_64600_.parse(registryreadops, nbt)).getOrThrow(false, errorMsg->{});
             worlddata = new PrimaryLevelData(levelsettings, worldgensettings, Lifecycle.stable());
          }
 
@@ -171,9 +_,10 @@
             dedicatedserver1.m_129801_(optionset.valueOf(optionspec11));
             dedicatedserver1.m_129975_(optionset.has(optionspec2));
             dedicatedserver1.m_129948_(optionset.valueOf(optionspec12));
+            dedicatedserver1.options = optionset;
             boolean flag1 = !optionset.has(optionspec) && !optionset.valuesOf(optionspec13).contains("nogui");
             if (flag1 && !GraphicsEnvironment.isHeadless()) {
-               dedicatedserver1.m_139667_();
+               // dedicatedserver1.showGui(); // Mohist
             }
 
             return dedicatedserver1;
@@ -181,6 +_,7 @@
          Thread thread = new Thread("Server Shutdown Thread") {
             public void run() {
                dedicatedserver.m_7570_(true);
+               LogManager.shutdown(); // we're manually managing the logging shutdown on the server. Make sure we do it here at the end.
             }
          };
          thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(f_129670_));
